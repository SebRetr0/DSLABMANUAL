#include <stdio.h>
#include <stdlib.h>
#include<iostream>
using namespace std;
class snode
{
    public:
    int data;
    snode *next;

};
class stack
{
    public:
    snode *top;
    stack(){top=NULL;};
    void push(int);
    int pop();
    void display();
    int peek(int);
    int isempty();
    int topstack()
    {
        return top->data;
    }
    void enqueue(int,stack*);
    int dequeue(stack*);
};

void stack:: display()
{
    snode *t=top;
    while(t!=NULL)
    {
        cout<<t->data<<" ";
        t=t->next;
    }
    cout<<endl;
}
void stack::push(int data)
{
    snode *t=new snode;
    if(t==NULL)
        cout<<"stack is overflow\n";
    else
    {
        t->data=data;
        t->next=top;
        top=t;

    }
}
int stack:: pop()
{
    int data=-1;
    if(top==NULL)
        cout<<"stack is underflow\n";
    else
    {
        snode *t=top;
        top=top->next;
        data= t->data;
        free(t);
    }
    return data;
}
int stack:: peek(int pos)
{
    snode *t=top;
    for(int i=0;i<pos-1&&t!=NULL;i++)
    {
        t=t->next;
    }
    if(t!=NULL)
        return t->data;
    else
        return -1;
}
int stack::isempty()
{
    if(top==NULL)
    {
        return 1;
    }
    return 0;
}
void stack :: enqueue(int x,stack *s2)
{
    this->push(x);
}
int stack::dequeue(stack *s2)
{
    if(s2->isempty())
    {
          if(this->isempty())
          {
              cout<<"queue is empty";
              return -1;
          }
          else
            while(!isempty())
          {
                s2->push(this->pop());
          }
    }
    return s2->pop();

}
int main()
{
    stack s1,s2;
    s1.enqueue(1,&s2);
    s1.enqueue(2,&s2);
    s1.enqueue(3,&s2);
    s1.enqueue(4,&s2);
    s1.display();

   // cout<<endl<<s.pop()<<endl;
   // cout<<peek(3)<<endl;
//    s.display();
}
